header TCPheader {
    int srcport;
    int srcip;
    int dstport;
    int dstip;
    int seq;
}

event SEND {
    int time_event;
    int flow_id;
}

event ACK {
    int flow_id;
    int acknum;
    int time_event;
}

event TIMER {
    int flow_id;
}

sched myScheduler {

    int send_drop(queue_t send_queue) {
        int most_recent = 0;
        int index = 0;
        int counter = 0;
        SEND element;

        foreach (element in send_queue) {
            if(element.time_event > most_recent) {
                most_recent = element.time_event;
                index = counter;
            }
            counter = counter + 1;
        }

        return index;
    }


    queue_t<SEND> send_queue(10, 20, send_drop);

    int ack_drop(queue_t ack_queue) {
        int index = ack_queue.len() - 1;

        return index;
    }


    queue_t<ACK> ack_queue(5, 15, ack_drop);


    int timer_drop(queue_t timer_queue) {
        int index = timer_queue.len() - 1;

        return index;
    }


    queue_t<TIMER> timer_queue(3, 10, timer_drop);

    bool enqueue(event_t new_event) {
        if(type(new_event) == SEND) {
            send_queue.push(new_event);
            return 1;
        }
        else if (type(new_event) == ACK) {
            ack_queue.push(new_event);
            return 1;
        } else if (type(new_event) == TIMER) {
            timer_queue.push(new_event);
            return 1;
        }
        return 0;
    }

    event_t next_event(queue_t send_queue, queue_t ack_queue, queue_t timer_queue) {
        if(timer_queue.len() > ack_queue.len() / 2) {
            return send_queue.pop();
        }
        if (send_queue.len() < ack_queue.len()) {
            return ack_queue.pop();
        }
        return timer_queue.pop();
    }
}

context myContext {
    stream data;
    list<int> startTime;
    int m_Una;
    int m_Nxt;
    int m_start;
    int m_Wnd;
    int m_Iss;
    int Smss;
    int m_dupSeq;
    int m_dupAmount;
    int m_cnwd;
    int m_ssthresh;
    int m_segmentsize;
    int m_dupThreshold;
    int flow_size;
    bool timeouthappened;
    float SRTT;
    float RTTVAR;
    float RTO;
}

struct proc_out_t {
    list<event_t> event_list;
    list<pkt_t> packet_list;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

proc_out_t ACKProcessor(ACK this_event, myContext ctx) {
    proc_out_t output;
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        } else {
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        if (ctx.RTO < 1) {
            ctx.RTO = 1;
        }
    }

    if (ctx.m_Una < this_event.acknum) {
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    return output;
}

proc_out_t TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

dispatch table {
    SEND -> {SendProcessor};
    ACK -> {ACKProcessor};
    TIMER -> {TIMERProcessor};
}
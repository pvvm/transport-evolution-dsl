header TCPheader {
    int srcport;
    int dstport;
    int seq;
    int ack;
}

event SEND {
    int time_event;
    int flow_id;
}

sched myScheduler {

    int send_drop(queue_t send_queue, SEND new_event) {
        int most_recent = 0;
        int index = 0;
        int counter = 0;

        foreach (element in send_queue) {
            if(element.time_event > most_recent) {
                most_recent = element.time_event;
                index = counter;
            }
            counter = counter + 1;
        }

        return index;
    }

    bool enqueue(event new_event) {

        if (type(new_event) == SEND) {
            send_queue.push(new_event);
            return 1;
        }
        return 0;
    }

    queue_t<SEND> send_queue(10, 20, send_drop);

    event_t next_event(queue_t send_queue, queue_t ack_queue, queue_t timer_queue) {
        if(timer_queue.len() > ack_queue.len() / 2) {
            return send_queue.pop();
        }
        if (send_queue.len() < ack_queue.len()) {
            return ack_queue.pop();
        }
        return timer_queue.pop();
    }
}

dispatch table {
    SEND -> {SendProcessor};
    ACK -> {ACKProcessor};
    TIMER -> {TIMERProcessor};
}

struct proc_out_t {
    list<event_t> event_list;
    list<pkt_t> packet_list;
}

proc_out_t SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        float now = time();
        //startTime is a map. I'll use stream for now, just so it can work
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}


context myContext {
    stream data;
    list<int> startTime;
    int m_Una;
    int m_Nxt;
    int m_start;
    int m_Wnd;
    int m_Iss;
    int Smss;
    int m_dupSeq;
    int m_dupAmount;
    int m_cnwd;
    int m_ssthresh;
    int m_segmentsize;
    int m_dupThreshold;
    int flow_size;
    bool timeouthappened;
    float SRTT;
    float RTTVAR;
    float RTO;
}
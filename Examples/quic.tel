header QUICHeader {
    int src_port;
    int src_ip;
    int dst_port;
    int dst_ip;
    int pkt_number;
}

event ADD_DATA {
    int flow_id;
    int stream_id;
    stream new_data;
}

event SEND_PACKET {
    int flow_id;
}

event ACK_PACKET {
    int flow_id;
    int packet_num;
}

sched myScheduler {
    int add_drop(queue_t add_queue, ADD_DATA new_event) {
        int index = add_queue.len() - 1;
        return index;
    }
    bool enqueue(event new_event) {
        if (type(new_event) == ADD_DATA) {
            send_queue.push(new_event);
            return 1;
        }
        return 0;
    }
    queue_t<ADD_DATA> add_queue(10, 20, add_drop);

    int send_drop(queue_t send_queue, SEND_PACKET new_event) {
        int index = send_queue.len() - 1;
        return index;
    }
    bool enqueue(event new_event) {
        if (type(new_event) == SEND_PACKET) {
            send_queue.push(new_event);
            return 1;
        }
        return 0;
    }
    queue_t<SEND_PACKET> send_queue(5, 15, send_drop);

    int ack_drop(queue_t ack_queue, ACK_PACKET new_event) {
        int index = ack_queue.len() - 1;
        return index;
    }
    bool enqueue(event new_event) {
        if (type(new_event) == ACK_PACKET) {
            ack_queue.push(new_event);
            return 1;
        }
        return 0;
    }
    queue_t<ACK_PACKET> ack_queue(5, 15, ack_drop);

    event_t next_event(queue_t send_queue, queue_t ack_queue, queue_t add_queue) {
        if(add_queue.len() > ack_queue.len() / 2) {
            return send_queue.pop();
        }
        if (send_queue.len() < ack_queue.len()) {
            return ack_queue.pop();
        }
        return add_queue.pop();
    }
}

dispatch table {
    ADD_DATA -> {AddProcessor};
    SEND_PACKET -> {SendProcessor};
    ACK -> {ACKProcessor};
}

struct proc_out_t {
    list<event_t> event_list;
    list<pkt_t> packet_list;
}

struct QUICStream{
	stream data;
    int stream_id;
	int m_nxt;
	int limit;
    list<bool> lost;
    list<bool> acked;
}

struct frame {
    int size;
    int stream_id;
    int offset;
    stream data;
}

proc_out_t AddProcessor (ADD_DATA new_event, QUICctx ctx) {
    int stream_id = new_event.stream_id;
    
    bool found = false;
    foreach (single_stream in ctx.streams) {
        if (single_stream.stream_id == stream_id) {
            found == true;
        }
    }
    if (found) {
        QUICStream new_stream;
        new_stream.stream_id = stream_id;
        ctx.streams[stream_id] = new_stream;
    }
    QUICKstream new_stream = ctx.streams[stream_id];
    new_stream.add(new_event.new_data);

    proc_out_t output;

    return output;
}

proc_out_t SendProcessor (SEND_PACKET new_event, QUICctx ctx) {
    pkt_t p = new_pkt();
    int total_bytes = 0;
    foreach (s in ctx.streams) {
        frame f;
        int space_in_packet = ctx.packet_size - total_bytes;
        int data_in_stream = s.len() - s.m_nxt;
        int bytes_to_add;
        if (data_in_stream >= space_in_packet && s.frame_size >= space_in_packet) {
            bytes_to_add = space_in_packet;
        } else {
            if (space_in_packet > data_in_stream && s.frame_size > data_in_stream) {
                bytes_to_add = space_in_packet;
            } else {
                bytes_to_add = s.frame_size;
            }
        }
        if (total_bytes + bytes_to_add > ctx.packet_size) {
            break;
        }
        f.stream_id = s.stream_id;
        f.add_data(s.data[s.m_nxt : s.m_nxt + bytes_to_add]);
        p.add_data(bytes(f));
    }
    TCPheader th;
    p.add_hdr(th);

    proc_out_t output;
    output.packet_list.add(p);
    return output;
}

proc_out_t ACKProcessor (ACK_PACKET new_event, QUICctx ctx) {
    int pkt_num = new_event.packet_num;
    pkt_t acked_pkt = ctx.sent_packets[pkt_num];
    stream pkt_data = acked_pkt.get_data();
    frame f;
    foreach (f in pkt_data) {
        int stream_id = f.stream_id;
        QUICStream s = ctx.streams[stream_id];
        int start_byte = f.offset;
        int end_byte = f.offset + f.size - 1;
        for (int i = start_byte; i <= end_byte; i = i + 1) {
            s.acked[i] = true;
        }
    }
    pkt_t p = new_pkt();
    int lost_index = new_event.packet_num - ctx.k_packet_theshold;
    if (lost_index != 0) {
        for (; lost_index < new_event.packet_num; lost_index = lost_index + 1) {
            pkt_t lost_pkt = ctx.sent_packets[lost_index];
            stream pkt_data = lost_pkt.get_data();
            frame f;
            foreach (f in pkt_data) {
                p.add_data(f);
            }
        }
        TCPheader th;
        p.add_hdr(th);
    }

    proc_out_t output;
    output.packet_list.add(p);
    return output;
}

context QUICctx{
    int packet_number;
    list<QUICStream> streams;
    list<pkt_t> sent_packets;
    int frame_size;
    int packet_size;
    int sendBase = 0;
    int windowSize = 1;
    int k_packet_theshold = 0;
}